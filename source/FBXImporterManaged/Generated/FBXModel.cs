//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FBXModel : RCObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FBXModel(global::System.IntPtr cPtr, bool cMemoryOwn) : base(FBXImporterUnmanagedPINVOKE.FBXModel_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FBXModel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FBXModel() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FBXImporterUnmanagedPINVOKE.delete_FBXModel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FBXModelPtr Create() {
    FBXModelPtr ret = new FBXModelPtr(FBXImporterUnmanagedPINVOKE.FBXModel_Create(), true);
    return ret;
  }

  public FBXModel() : this(FBXImporterUnmanagedPINVOKE.new_FBXModel(), true) {
  }

  public void SetName(string name) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetName(swigCPtr, name);
  }

  public string GetName() {
    string ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetName(swigCPtr);
    return ret;
  }

  public int GetChildCount() {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetChildCount(swigCPtr);
    return ret;
  }

  public FBXModelPtr GetChild(int index) {
    FBXModelPtr ret = new FBXModelPtr(FBXImporterUnmanagedPINVOKE.FBXModel_GetChild(swigCPtr, index), true);
    return ret;
  }

  public void AddChild(FBXModelPtr child) {
    FBXImporterUnmanagedPINVOKE.FBXModel_AddChild(swigCPtr, FBXModelPtr.getCPtr(child));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ResizeVertex(int count) {
    FBXImporterUnmanagedPINVOKE.FBXModel_ResizeVertex(swigCPtr, count);
  }

  public void ResizeColor(int count) {
    FBXImporterUnmanagedPINVOKE.FBXModel_ResizeColor(swigCPtr, count);
  }

  public void ResizeUV(int layerCount, int count) {
    FBXImporterUnmanagedPINVOKE.FBXModel_ResizeUV(swigCPtr, layerCount, count);
  }

  public void ResizeNormal(int count) {
    FBXImporterUnmanagedPINVOKE.FBXModel_ResizeNormal(swigCPtr, count);
  }

  public void ResizeTangent(int count) {
    FBXImporterUnmanagedPINVOKE.FBXModel_ResizeTangent(swigCPtr, count);
  }

  public void ResizeBinormal(int count) {
    FBXImporterUnmanagedPINVOKE.FBXModel_ResizeBinormal(swigCPtr, count);
  }

  public void ResizeMaterial(int count) {
    FBXImporterUnmanagedPINVOKE.FBXModel_ResizeMaterial(swigCPtr, count);
  }

  public void SetPivotRotation(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetPivotRotation(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRotationOffset(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetRotationOffset(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPreRotation(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetPreRotation(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPostRotation(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetPostRotation(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPivotScale(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetPivotScale(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetScalingOffset(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetScalingOffset(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTranslation(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetTranslation(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRotation(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetRotation(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetScale(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetScale(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGeometryTranslation(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetGeometryTranslation(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGeometryRotation(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetGeometryRotation(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGeometryScale(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetGeometryScale(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddVertex(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_AddVertex(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddIndex(int subMesh, int value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_AddIndex(swigCPtr, subMesh, value);
  }

  public void AddColor(FBXColor value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_AddColor(swigCPtr, FBXColor.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddUV(int layerIndex, FBXVector2 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_AddUV(swigCPtr, layerIndex, FBXVector2.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddNormal(FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_AddNormal(swigCPtr, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTangent(FBXVector4 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_AddTangent(swigCPtr, FBXVector4.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddBinormal(FBXVector4 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_AddBinormal(swigCPtr, FBXVector4.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddMaterial(FBXMaterialPtr value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_AddMaterial(swigCPtr, FBXMaterialPtr.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVertex(int index, FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetVertex(swigCPtr, index, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetColor(int index, FBXColor value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetColor(swigCPtr, index, FBXColor.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUVLayer(int layerIndex) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetUVLayer(swigCPtr, layerIndex);
  }

  public void SetUV(int layerIndex, int index, FBXVector2 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetUV(swigCPtr, layerIndex, index, FBXVector2.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNormal(int index, FBXVector3 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetNormal(swigCPtr, index, FBXVector3.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTangent(int index, FBXVector4 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetTangent(swigCPtr, index, FBXVector4.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBinormal(int index, FBXVector4 value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetBinormal(swigCPtr, index, FBXVector4.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIndexMap(int iControlPoint, int iVertex) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetIndexMap(swigCPtr, iControlPoint, iVertex);
  }

  public void SetMaterial(int index, FBXMaterialPtr value) {
    FBXImporterUnmanagedPINVOKE.FBXModel_SetMaterial(swigCPtr, index, FBXMaterialPtr.getCPtr(value));
    if (FBXImporterUnmanagedPINVOKE.SWIGPendingException.Pending) throw FBXImporterUnmanagedPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddMaterialPolygons(int iMaterial, int iPolygon) {
    FBXImporterUnmanagedPINVOKE.FBXModel_AddMaterialPolygons(swigCPtr, iMaterial, iPolygon);
  }

  public FBXVector3 GetPivotRotation() {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetPivotRotation(swigCPtr), true);
    return ret;
  }

  public FBXVector3 GetRotationOffset() {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetRotationOffset(swigCPtr), true);
    return ret;
  }

  public FBXVector3 GetPreRotation() {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetPreRotation(swigCPtr), true);
    return ret;
  }

  public FBXVector3 GetPostRotation() {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetPostRotation(swigCPtr), true);
    return ret;
  }

  public FBXVector3 GetPivotScale() {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetPivotScale(swigCPtr), true);
    return ret;
  }

  public FBXVector3 GetScalingOffset() {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetScalingOffset(swigCPtr), true);
    return ret;
  }

  public FBXVector3 GetTranslation() {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetTranslation(swigCPtr), true);
    return ret;
  }

  public FBXVector3 GetRotation() {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetRotation(swigCPtr), true);
    return ret;
  }

  public FBXVector3 GetScale() {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetScale(swigCPtr), true);
    return ret;
  }

  public FBXVector3 GetGeometryTranslation() {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetGeometryTranslation(swigCPtr), true);
    return ret;
  }

  public FBXVector3 GetGeometryRotation() {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetGeometryRotation(swigCPtr), true);
    return ret;
  }

  public FBXVector3 GetGeometryScale() {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetGeometryScale(swigCPtr), true);
    return ret;
  }

  public FBXVector3 GetVertex(int index) {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetVertex(swigCPtr, index), true);
    return ret;
  }

  public int GetIndex(int iMaterial, int index) {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetIndex(swigCPtr, iMaterial, index);
    return ret;
  }

  public FBXColor GetColor(int index) {
    FBXColor ret = new FBXColor(FBXImporterUnmanagedPINVOKE.FBXModel_GetColor(swigCPtr, index), true);
    return ret;
  }

  public FBXVector2 GetUV(int layerIndex, int index) {
    FBXVector2 ret = new FBXVector2(FBXImporterUnmanagedPINVOKE.FBXModel_GetUV(swigCPtr, layerIndex, index), true);
    return ret;
  }

  public FBXVector3 GetNormal(int index) {
    FBXVector3 ret = new FBXVector3(FBXImporterUnmanagedPINVOKE.FBXModel_GetNormal(swigCPtr, index), true);
    return ret;
  }

  public FBXVector4 GetTangent(int index) {
    FBXVector4 ret = new FBXVector4(FBXImporterUnmanagedPINVOKE.FBXModel_GetTangent(swigCPtr, index), true);
    return ret;
  }

  public FBXVector4 GetBinormal(int index) {
    FBXVector4 ret = new FBXVector4(FBXImporterUnmanagedPINVOKE.FBXModel_GetBinormal(swigCPtr, index), true);
    return ret;
  }

  public int GetIndexMapCount(int iControlPoint) {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetIndexMapCount(swigCPtr, iControlPoint);
    return ret;
  }

  public int GetIndexMap(int iControlPoint, int index) {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetIndexMap(swigCPtr, iControlPoint, index);
    return ret;
  }

  public FBXMaterialPtr GetMaterial(int index) {
    FBXMaterialPtr ret = new FBXMaterialPtr(FBXImporterUnmanagedPINVOKE.FBXModel_GetMaterial(swigCPtr, index), true);
    return ret;
  }

  public int GetMaterialPolygonCount(int iMaterial) {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetMaterialPolygonCount(swigCPtr, iMaterial);
    return ret;
  }

  public int GetMaterialPolygon(int iMaterial, int index) {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetMaterialPolygon(swigCPtr, iMaterial, index);
    return ret;
  }

  public int GetVertexCount() {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetVertexCount(swigCPtr);
    return ret;
  }

  public int GetIndiceCount(int iMaterial) {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetIndiceCount(swigCPtr, iMaterial);
    return ret;
  }

  public int GetColorCount() {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetColorCount(swigCPtr);
    return ret;
  }

  public int GetUVLayerCount() {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetUVLayerCount(swigCPtr);
    return ret;
  }

  public int GetUVCount(int layerIndex) {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetUVCount(swigCPtr, layerIndex);
    return ret;
  }

  public int GetNormalCount() {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetNormalCount(swigCPtr);
    return ret;
  }

  public int GetTangentCount() {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetTangentCount(swigCPtr);
    return ret;
  }

  public int GetBinormalCount() {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetBinormalCount(swigCPtr);
    return ret;
  }

  public int GetMaterialCount() {
    int ret = FBXImporterUnmanagedPINVOKE.FBXModel_GetMaterialCount(swigCPtr);
    return ret;
  }

}
